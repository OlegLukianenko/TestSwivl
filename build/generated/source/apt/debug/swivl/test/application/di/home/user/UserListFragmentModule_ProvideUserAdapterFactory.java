// Generated by Dagger (https://google.github.io/dagger).
package swivl.test.application.di.home.user;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import swivl.test.application.app.home.adapter.UserRecyclerAdapter;

public final class UserListFragmentModule_ProvideUserAdapterFactory
    implements Factory<UserRecyclerAdapter> {
  private final UserListFragmentModule module;

  private final Provider<UserRecyclerAdapter.UserItemListListener> listenerProvider;

  public UserListFragmentModule_ProvideUserAdapterFactory(
      UserListFragmentModule module,
      Provider<UserRecyclerAdapter.UserItemListListener> listenerProvider) {
    this.module = module;
    this.listenerProvider = listenerProvider;
  }

  @Override
  public UserRecyclerAdapter get() {
    return provideInstance(module, listenerProvider);
  }

  public static UserRecyclerAdapter provideInstance(
      UserListFragmentModule module,
      Provider<UserRecyclerAdapter.UserItemListListener> listenerProvider) {
    return proxyProvideUserAdapter(module, listenerProvider.get());
  }

  public static UserListFragmentModule_ProvideUserAdapterFactory create(
      UserListFragmentModule module,
      Provider<UserRecyclerAdapter.UserItemListListener> listenerProvider) {
    return new UserListFragmentModule_ProvideUserAdapterFactory(module, listenerProvider);
  }

  public static UserRecyclerAdapter proxyProvideUserAdapter(
      UserListFragmentModule instance, UserRecyclerAdapter.UserItemListListener listener) {
    return Preconditions.checkNotNull(
        instance.provideUserAdapter(listener),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
