// Generated by Dagger (https://google.github.io/dagger).
package swivl.test.application.di.app;

import android.arch.lifecycle.ViewModelProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import swivl.test.application.di.viewmodel.ViewModelComponent;

public final class AppModule_ProvideViewModelFactoryFactory
    implements Factory<ViewModelProvider.Factory> {
  private final AppModule module;

  private final Provider<ViewModelComponent.Builder> componentProvider;

  public AppModule_ProvideViewModelFactoryFactory(
      AppModule module, Provider<ViewModelComponent.Builder> componentProvider) {
    this.module = module;
    this.componentProvider = componentProvider;
  }

  @Override
  public ViewModelProvider.Factory get() {
    return provideInstance(module, componentProvider);
  }

  public static ViewModelProvider.Factory provideInstance(
      AppModule module, Provider<ViewModelComponent.Builder> componentProvider) {
    return proxyProvideViewModelFactory(module, componentProvider.get());
  }

  public static AppModule_ProvideViewModelFactoryFactory create(
      AppModule module, Provider<ViewModelComponent.Builder> componentProvider) {
    return new AppModule_ProvideViewModelFactoryFactory(module, componentProvider);
  }

  public static ViewModelProvider.Factory proxyProvideViewModelFactory(
      AppModule instance, ViewModelComponent.Builder component) {
    return Preconditions.checkNotNull(
        instance.provideViewModelFactory(component),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
