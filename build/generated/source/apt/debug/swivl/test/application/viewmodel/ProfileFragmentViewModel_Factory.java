// Generated by Dagger (https://google.github.io/dagger).
package swivl.test.application.viewmodel;

import dagger.internal.Factory;
import javax.inject.Provider;
import swivl.test.application.data.repository.RepositoryApi;

public final class ProfileFragmentViewModel_Factory implements Factory<ProfileFragmentViewModel> {
  private final Provider<RepositoryApi> repositoryApiProvider;

  public ProfileFragmentViewModel_Factory(Provider<RepositoryApi> repositoryApiProvider) {
    this.repositoryApiProvider = repositoryApiProvider;
  }

  @Override
  public ProfileFragmentViewModel get() {
    return provideInstance(repositoryApiProvider);
  }

  public static ProfileFragmentViewModel provideInstance(
      Provider<RepositoryApi> repositoryApiProvider) {
    ProfileFragmentViewModel instance = new ProfileFragmentViewModel();
    ProfileFragmentViewModel_MembersInjector.injectRepositoryApi(
        instance, repositoryApiProvider.get());
    return instance;
  }

  public static ProfileFragmentViewModel_Factory create(
      Provider<RepositoryApi> repositoryApiProvider) {
    return new ProfileFragmentViewModel_Factory(repositoryApiProvider);
  }

  public static ProfileFragmentViewModel newProfileFragmentViewModel() {
    return new ProfileFragmentViewModel();
  }
}
