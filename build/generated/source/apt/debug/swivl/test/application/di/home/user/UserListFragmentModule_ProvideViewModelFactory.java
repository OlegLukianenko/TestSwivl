// Generated by Dagger (https://google.github.io/dagger).
package swivl.test.application.di.home.user;

import android.arch.lifecycle.ViewModelProvider;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import swivl.test.application.app.home.UserListFragment;
import swivl.test.application.viewmodel.UserListFragmentViewModel;

public final class UserListFragmentModule_ProvideViewModelFactory
    implements Factory<UserListFragmentViewModel> {
  private final UserListFragmentModule module;

  private final Provider<UserListFragment> fragmentProvider;

  private final Provider<ViewModelProvider.Factory> factoryProvider;

  public UserListFragmentModule_ProvideViewModelFactory(
      UserListFragmentModule module,
      Provider<UserListFragment> fragmentProvider,
      Provider<ViewModelProvider.Factory> factoryProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
    this.factoryProvider = factoryProvider;
  }

  @Override
  public UserListFragmentViewModel get() {
    return provideInstance(module, fragmentProvider, factoryProvider);
  }

  public static UserListFragmentViewModel provideInstance(
      UserListFragmentModule module,
      Provider<UserListFragment> fragmentProvider,
      Provider<ViewModelProvider.Factory> factoryProvider) {
    return proxyProvideViewModel(module, fragmentProvider.get(), factoryProvider.get());
  }

  public static UserListFragmentModule_ProvideViewModelFactory create(
      UserListFragmentModule module,
      Provider<UserListFragment> fragmentProvider,
      Provider<ViewModelProvider.Factory> factoryProvider) {
    return new UserListFragmentModule_ProvideViewModelFactory(
        module, fragmentProvider, factoryProvider);
  }

  public static UserListFragmentViewModel proxyProvideViewModel(
      UserListFragmentModule instance,
      UserListFragment fragment,
      ViewModelProvider.Factory factory) {
    return Preconditions.checkNotNull(
        instance.provideViewModel(fragment, factory),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
