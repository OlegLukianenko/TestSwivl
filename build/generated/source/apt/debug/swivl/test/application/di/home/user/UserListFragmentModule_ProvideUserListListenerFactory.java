// Generated by Dagger (https://google.github.io/dagger).
package swivl.test.application.di.home.user;

import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import swivl.test.application.app.home.UserListFragment;
import swivl.test.application.app.home.adapter.UserRecyclerAdapter;

public final class UserListFragmentModule_ProvideUserListListenerFactory
    implements Factory<UserRecyclerAdapter.UserItemListListener> {
  private final UserListFragmentModule module;

  private final Provider<UserListFragment> fragmentProvider;

  public UserListFragmentModule_ProvideUserListListenerFactory(
      UserListFragmentModule module, Provider<UserListFragment> fragmentProvider) {
    this.module = module;
    this.fragmentProvider = fragmentProvider;
  }

  @Override
  public UserRecyclerAdapter.UserItemListListener get() {
    return provideInstance(module, fragmentProvider);
  }

  public static UserRecyclerAdapter.UserItemListListener provideInstance(
      UserListFragmentModule module, Provider<UserListFragment> fragmentProvider) {
    return proxyProvideUserListListener(module, fragmentProvider.get());
  }

  public static UserListFragmentModule_ProvideUserListListenerFactory create(
      UserListFragmentModule module, Provider<UserListFragment> fragmentProvider) {
    return new UserListFragmentModule_ProvideUserListListenerFactory(module, fragmentProvider);
  }

  public static UserRecyclerAdapter.UserItemListListener proxyProvideUserListListener(
      UserListFragmentModule instance, UserListFragment fragment) {
    return Preconditions.checkNotNull(
        instance.provideUserListListener(fragment),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
